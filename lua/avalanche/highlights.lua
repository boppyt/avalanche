local M = {}

function M.get_hi_groups(colors)
    return {
        -- Minimal
        Comment           = { fg = colors.graphite },
        ColorColumn       = { fg = colors.ash },
        Conceal           = { fg = colors.coal },
        -- Cursor            = { },
        -- lCursor           = { },
        -- CursorIM          = { },
        CursorColumn      = { bg = colors.light_bg },
        CursorLine        = { bg = colors.light_bg },
        Directory         = { fg = colors.fg },
        DiffAdd           = { fg = colors.green, bg = colors.green_bg },
        DiffChange        = { fg = colors.yellow, bg = colors.yellow_bg },
        DiffDelete        = { fg = colors.red, bg = colors.red_bg },
        DiffText          = { link = "DiffChange" },

        EndOfBuffer       = { fg = colors.bg },
        -- TermCursor        = { },
        -- TermCursorNC      = { },
        ErrorMsg          = { fg = colors.red, bg = colors.red_bg, bold = true, underline = true },
        VertSplit         = { fg = colors.graphite },
        Folded            = { fg = colors.ash },
        -- FoldColumn        = { },
        -- SignColumn        = { },
        IncSearch         = { fg = colors.bg, bg = colors.accent },
        -- Substitute        = { },
        LineNr            = { fg = colors.graphite },
        CursorLineNr      = { fg = colors.fg },
        MatchParen        = { fg = colors.red, bg = colors.graphite }, -- TODO: ash?
        ModeMsg           = { fg = colors.coal },
        -- MsgArea           = { },
        -- MsgSeparator      = { },
        MoreMsg           = { fg = colors.accent },
        NonText           = { fg = colors.coal },
        Normal            = { fg = colors.fg, bg = colors.bg },
        NormalFloat       = { link = "Normal" },
        NormalNC          = { link = "Normal" },
        Pmenu             = { fg = colors.ash, bg = colors.light_bg },
        PmenuSel          = { fg = colors.accent, bg = colors.accent_bg },
        PmenuSbar         = { bg = colors.bg },
        PmenuThumb        = { bg = colors.bg },
        Question          = { fg = colors.accent },
        -- QuickFixLine      = { },
        Search            = { link = "IncSearch" },
        SpecialKey        = { fg = colors.ash },
        -- SpellBad          = { },
        -- SpellCap          = { },
        -- SpellLocal        = { },
        -- SpellRare         = { },
        StatusLine        = { fg = colors.fg, bg = colors.light_bg },
        StatusLineNC      = { fg = colors.fg, bg = colors.coal },
        TabLine           = { fg = colors.fg, bg = colors.graphite },
        TabLineFill       = { bg = colors.coal },
        TabLineSel        = { fg = colors.accent, bg = colors.graphite, bold = true },
        Title             = { fg = colors.accent },
        Visual            = { bg = colors.light_bg },
        -- VisualNOS         = { },
        WarningMsg        = { fg = colors.red },
        Whitespace        = { link = "Conceal" },
        -- WildMenu          = { },

        -- Standard
        Constant          = { fg = colors.fg },
        String            = { fg = colors.ash },
        Character         = { fg = colors.accent },
        -- Number            = { },
        -- Boolean           = { },
        -- Float             = { },

        Xdefaultspunct    = { fg = colors.ash },
        Xdefaultsvalue    = { fg = colors.ash },
        SnipLeadingSpaces = { bg = colors.ash },

        VimOption         = { fg = colors.fg },
        NimStructure      = { fg = colors.ash },

        MoonInterpDelim   = { fg = colors.graphite },
        YueInterpDelim    = { fg = colors.graphite },

        MoonExtendedOp    = { fg = colors.ash },
        YueExtendedOp     = { fg = colors.ash },

        MoonAssignOp      = { fg = colors.ash },
        YueAssignOp       = { fg = colors.ash },

        YueSpecialVar     = { fg = colors.accent },

        NetrwClassify     = { fg = colors.ash },
        NetrwPlain        = { fg = colors.ash },

        Identifier        = { fg = colors.fg },
        Function          = { fg = colors.accent },

        Statement         = { fg = colors.ash },
        Conditional       = { link = "Statement" },
        Repeat            = { link = "Statement" },
        Label             = { link = "Statement" },
        Operator          = { link = "Statement" },
        Keyword           = { link = "Statement" },
        Exception         = { link = "Statement" },

        Include           = { fg = colors.ash },
        PreProc           = { fg = colors.ash },
        -- Define            = { },
        Macro             = { fg = colors.accent },
        -- PreCondit         = { },

        Type              = { fg = colors.ash },
        -- StorageClass      = { },
        -- Structure         = { },
        -- TypeDef           = { },

        Special           = { },
        -- SpecialChar       = { },
        -- Tag               = { },
        -- Delimiter         = { },
        -- SpecialComment    = { },
        -- Debug             = { },

        -- Underlined        = { },
        -- Bold              = { },
        -- Italic            = { },


        -- Ignore            = { },

        Error             = { link = "ErrorMsg" },
        Todo              = { fg = colors.accent }, -- use other accent color?

        -- LSP
        LspReferenceText                     = { underline = true },
        LspReferenceRead                     = { underline = true },
        LspReferenceWrite                    = { underline = true },

        LspDiagnosticsDefaultError           = { fg = colors.red },
        LspDiagnosticsDefaultWarning         = { fg = colors.yellow },
        LspDiagnosticsDefaultInformation     = { fg = colors.ash },
        LspDiagnosticsDefaultHint            = { fg = colors.graphite },

        LspDiagnosticsVirtualTextError       = { link = "LspDiagnosticsDefaultError" },
        LspDiagnosticsVirtualTextWarning     = { link = "LspDiagnosticsDefaultWarning" },
        LspDiagnosticsVirtualTextInformation = { link = "LspDiagnosticsDefaultInformation" },
        LspDiagnosticsVirtualTextHint        = { link = "LspDiagnosticsDefaultHint" },

        -- LspDiagnosticsUnderlineError         = { },
        -- LspDiagnosticsUnderlineWarning       = { },
        -- LspDiagnosticsUnderlineInformation   = { },
        -- LspDiagnosticsUnderlineHint          = { },

        LspDiagnosticsFloatingError          = { link = "LspDiagnosticsDefaultError" },
        LspDiagnosticsFloatingWarning        = { link = "LspDiagnosticsDefaultWarning" },
        LspDiagnosticsFloatingInformation    = { link = "LspDiagnosticsDefaultInformation" },
        LspDiagnosticsFloatingHint           = { link = "LspDiagnosticsDefaultHint" },

        LspDiagnosticsSignError              = { link = "LspDiagnosticsDefaultError" },
        LspDiagnosticsSignWarning            = { link = "LspDiagnosticsDefaultWarning" },
        LspDiagnosticsSignInformation        = { link = "LspDiagnosticsDefaultInformation" },
        LspDiagnosticsSignHint               = { link = "LspDiagnosticsDefaultHint" },

        DiagnosticError                      = { link = "LspDiagnosticsDefaultError" },
        DiagnosticWarn                       = { link = "LspDiagnosticsDefaultWarning" },
        DiagnosticInfo                       = { link = "LspDiagnosticsDefaultInformation" },
        DiagnosticHint                       = { link = "LspDiagnosticsDefaultHint" },

        DiagnosticVirtualTextError           = { link = "LspDiagnosticsVirtualTextError" },
        DiagnosticVirtualTextWarn            = { link = "LspDiagnosticsVirtualTextWarning" },
        DiagnosticVirtualTextInfo            = { link = "LspDiagnosticsVirtualTextInformation" },
        DiagnosticVirtualTextHint            = { link = "LspDiagnosticsVirtualTextHint" },

        -- DiagnosticUnderlineError             = { },
        -- DiagnosticUnderlineWarn              = { },
        -- DiagnosticUnderlineInfo              = { },
        -- DiagnosticUnderlineHint              = { },

        DiagnosticFloatingError              = { link = "LspDiagnosticsFloatingError" },
        DiagnosticFloatingWarn               = { link = "LspDiagnosticsFloatingWarning" },
        DiagnosticFloatingInfo               = { link = "LspDiagnosticsFloatingInformation" },
        DiagnosticFloatingHint               = { link = "LspDiagnosticsFloatingHint" },

        DiagnosticSignError                  = { link = "LspDiagnosticsSignError" },
        DiagnosticSignWarn                   = { link = "LspDiagnosticsSignWarning" },
        DiagnosticSignInfo                   = { link = "LspDiagnosticsSignInformation" },
        DiagnosticSignHint                   = { link = "LspDiagnosticsSignHint" },

        -- Treesitter
        -- TSAnnotation         = { },
        -- TSAttribute          = { },
        -- TSBoolean            = { },
        -- TSCharacter          = { },
        -- TSComment            = { },
        -- TSConstructor        = { },
        TSConditional        = { link = "Statement" },
        -- TSConstant           = { },
        -- TSConstBuiltin       = { },
        -- TSConstMacro         = { },
        TSError              = { fg = colors.red },
        -- TSException          = { },
        -- TSField              = { },
        -- TSFloat              = { },
        -- TSFunction           = { },
        TSFuncBuiltin        = { fg = colors.snow },
        -- TSFuncMacro          = { },
        TSInclude            = { link = "Include" },
        -- TSKeyword            = { },
        TSKeywordOperator    = { link = "Statement" },
        -- TSKeywordFunction    = { },
        -- TSLabel              = { },
        -- TSMethod             = { },
        TSNamespace          = { fg = colors.fg },
        TSNone               = { fg = colors.ash },
        -- TSNumber             = { },
        TSOperator           = { fg = colors.ash },
        -- TSParameter          = { },
        -- TSParameterReference = { },
        -- TSProperty           = { },
        TSPunctDelimiter     = { fg = colors.ash },
        TSPunctBracket       = { fg = colors.graphite },
        TSPunctSpecial       = { fg = colors.graphite },
        TSRepeat             = { link = "Statement" },
        -- TSString             = { },
        -- TSStringRegex        = { },
        -- TSStringEscape       = { },
        -- TSSymbol             = { },
        -- TSType               = { },
        -- TSTypeBuiltin        = { },
        TSVariable           = { fg = colors.fg },
        -- TSVariableBuiltin    = { },

        -- TSTag                = { },
        -- TSTagDelimiter       = { },
        -- TSText               = { },
        -- TSEmphasis           = { },
        -- TSUnderline          = { },
        -- TSStrike             = { },
        -- TSTitle              = { },
        -- TSLiteral            = { },
        -- TSURI                = { },

    }
end

return M
